<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<!-- 对web包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 （包括service controller） -->
	<context:component-scan base-package="com.yfhl" />

	<!-- 定义跳转的文件的前后缀 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 注册数据源 -->
	<!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property> 
		<property name="url" value="jdbc:mysql://172.16.230.168:3306/examsystem?useUnicode=true&amp;characterEncoding=utf8"></property> 
		<property name="username" value="root"></property> <property name="password" 
		value="admin"></property> </bean> -->

	<!-- 加载dbcp连接池文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:property/init.properties</value>
			</list>
		</property>
	</bean>

	<!-- 配置dbcp数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<!-- Connection Info -->
		<property name="driverClassName" value="${jdbc.dbcp.dataSource.driverClassName}" />
		<property name="url" value="${jdbc.dbcp.dataSource.url}" />
		<property name="username" value="${jdbc.dbcp.dataSource.username}" />
		<property name="password" value="${jdbc.dbcp.dataSource.password}" />
		<!-- Connection Pooling DBCP -->
		<property name="initialSize" value="${jdbc.dbcp.dataSource.initialSize}" />
		<property name="maxActive" value="${jdbc.dbcp.dataSource.maxActive}" />
		<property name="maxIdle" value="${jdbc.dbcp.dataSource.maxIdle}" />
		<property name="maxWait" value="${jdbc.dbcp.dataSource.maxWait}" />
		<property name="testOnBorrow" value="${jdbc.dbcp.dataSource.testOnBorrow}" />
		<property name="timeBetweenEvictionRunsMillis"
			value="${jdbc.dbcp.dataSource.timeBetweenEvictionRunsMillis}" />
		<property name="poolPreparedStatements"
			value="${jdbc.dbcp.dataSource.poolPreparedStatements}" />
		<property name="defaultAutoCommit" value="${jdbc.dbcp.dataSource.defaultAutoCommit}" />
		<!-- 是否自动回收超时连接 -->
		<property name="removeAbandoned" value="${jdbc.dbcp.dataSource.removeAbandoned}" />
		<!--removeAbandonedTimeout: 超时时间(以秒数为单位) -->
		<property name="removeAbandonedTimeout" value="180" />
	</bean>


	<!-- 注册sessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--依赖注入数据源，注入上文定义的dataSource -->
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="configLocation" value="classpath:mybatis-conf.xml" />
		<!--mapperLocations属性用来列出全部映射文件 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:mybatis-mapper/*.xml</value>
			</list>
		</property>
		<property name="typeAliasesPackage" value="com.yfhl.entity" />
	</bean>

	<!-- 通过扫描的模式，扫描目录在com/blog/mapper目录下，所有的mapper都继承SqlMapper接口的接口， 这样一个bean就可以了 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.yfhl.mapper"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>

	<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
	 <bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 指定所上传文件的总大小不能超过2000KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
		<property name="maxUploadSize" value="1073741824" />

	</bean>

	<!-- SpringMVC在超出上传文件限制时,会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
	<!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的,而且此时还没有进入到Controller方法中 -->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- 遇到MaxUploadSizeExceededException异常时,自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面 -->
				<prop
					key="org.springframework.web.multipart.MaxUploadSizeExceededException">error_fileupload
				</prop>
			</props>
		</property>
	</bean>

	<!--注册Transaction事务管理 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 自动扫描注入@Transactional 加入事务管理 -->
	<tx:annotation-driven transaction-manager="txManager" />

	<!-- 异常处理 -->
	<!-- <bean id="exceptionResolver2" class="com.glodon.examsystem.interceptor.ExceptionHandler"/> -->


	<!-- springMVC自动把我们加@ResponseBody注解的数据转成json消息传到前台 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean
					class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
					<!-- 为了处理返回的JSON数据的编码，默认是ISO-88859-1的，这里把它设置为UTF-8,解决有乱码的情况 -->
					<property name="supportedMediaTypes">
						<list>
							<value>text/html;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>

</beans>
